name: Deploy to Production

on:
  push:
    tags:
      - 'v*'  # 当推送以v开头的tag时触发

env:
  REGISTRY: docker.io
  IMAGE_NAME: betalyr-learning-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: 22
        script: |
          cd /opt/betalyr-learning
          
          # 拉取最新镜像
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # 停止现有容器
          docker compose -f docker-compose.prod.yml down
          
          # 更新镜像标签
          sed -i 's|image: betalyr-learning-server:.*|image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest|g' docker-compose.prod.yml
          
          # 启动新容器
          docker compose -f docker-compose.prod.yml up -d
          
          # 清理旧镜像
          docker image prune -f
          
          # 检查服务状态
          sleep 10
          docker compose -f docker-compose.prod.yml ps
          
          # 验证服务是否正常运行
          curl -f http://localhost:8000/health || exit 1
          
          echo "部署完成！"
          
  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "✅ 部署成功！服务已更新到版本 ${{ github.ref_name }}"
        else
          echo "❌ 部署失败！请检查日志"
          exit 1 